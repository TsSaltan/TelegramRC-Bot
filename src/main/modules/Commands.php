<?php
namespace main\modules;

use webcam\Webcam;
use Exception;
use windows;
use std, gui, framework, main;


/**
 * –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
 * –ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—ë—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
 * 
 * –ò–º—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –∏–º—è –º–µ—Ç–æ–¥–∞
 * /–∏–º—è-–∫–æ–º–∞–Ω–¥—ã => __–∏–º—è_–º–µ—Ç–æ–¥–∞
 * 
 * –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
 * —Ç.–µ. test 123 "456 789"
 * –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ 
 * Commands->test('123', '456 789');
 */
class Commands extends AbstractModule {

    /**
     * @var int 
     */
    public $chat_id;
    
    /**
     * @var string 
     */
    public $username;
    
    /**
     * @var TelegramBot 
     */
    public $bot;
    
    /**
     * –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö cd, ls, cat, get-file
     * @var FSO 
     */
    public $fso;
    
    public function __construct($chat_id = -1, $username = null, ?TelegramBot $bot = null){
        $this->chat_id = $chat_id;
        $this->username = $username;
        $this->bot = $bot;
        $this->fso = new FSO;
    }
    
    public function alias(string $cmd){
        $cmd = Regex::of('[^\\p{L}\\p{N}\\p{P}\\p{Z}]', Regex::UNICODE_CASE)->with($cmd)->replace('');
        $replace = [
            '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª' => '/run',
            '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª' => '/download',
            '–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ñ–∞–π–ª' => '/print',
            '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª' => '/delete'
        ];
        
        return str_replace(array_keys($replace), array_values($replace), $cmd);
    }
    
    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ 
     */
    protected function keyboard(array $lines){
        return $this->makeKeyboard('keyboard', $lines, ['one_time_keyboard' => false, 'resize_keyboard' => true]);
    }    
    
    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
     */
    protected function keyboardInline(array $lines){
        return $this->makeKeyboard('inline_keyboard', $lines);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
     * @param string $type keyboard|inline_keyboard
     * @param array $lines [[command => title]]
     * @param array $params [one_time_keyboard, resize_keyboard]
     * ...
     */
    protected function makeKeyboard($type, array $lines, array $params = []): array {
        $keyboard = array_merge([
            'one_time_keyboard' => true,
            'resize_keyboard' => false
        ], $params);
        
        $keyboard = $params;
  
        foreach ($lines as $line){
            $current_line = [];
            foreach ($line as $cmd => $text){
                if(strpos($cmd, 'http:') !== false || strpos($cmd, 'https:') !== false){
                    $current_line[] = [
                        "text" => $text,
                        "url" => $cmd
                    ];
                } else {
                    $current_line[] = [
                        "text" => $text,
                        "callback_data" => $cmd
                    ];
                }
            }
            
            $keyboard[$type][] = $current_line;
        }
        
        return $keyboard;
    }
    
    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞) 
     */
    protected function getMainKeyboard(){
        $isWin = Windows::isWin();
        $kb = [
            ['/help' => 'Help üÜò', '/osinfo' => 'OSInfo üíª', '/ip' => 'IP info üåê'],
            ['/screens' => 'Screens üñ•', '/cameras' => 'Cameras üì∑', '/ls' => 'ls / üóÇ'],
        ];
        
        if($isWin){
            $kb[] = ['/media' => 'Media RC üéõ ', '/volume' => 'Volume üîâ', '/brightness' => 'Brightness üîÖ']; //  üîÜ
            $kb[] = ['/battery' => 'Battery üîã', '/reboot' => 'Reboot üîÑ', '/shutdown' => 'Shutdown üõë'];
        }
        
        return $this->keyboard($kb);       
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ 
     */
    public function send($text, ?array $keyboard = null){
        $this->bot->sendAnswer($this->chat_id, ['text' => $text, 'keyboard' => $keyboard]);
    }    
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é 
     */
    public function sendPhoto($photo){
        $this->bot->sendAnswer($this->chat_id, ['photo' => $photo]);
    }   
     
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª / –¥–æ–∫—É–º–µ–Ω—Ç 
     */ 
    public function sendDoc($doc){
        $this->bot->sendAnswer($this->chat_id, ['doc' => $doc]);
    }
    
    /**
     * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ 
     */
    public function undefinedMsg($cmd = null){
        return ['text' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ "' . $cmd . '"'];        
    }
        
    /**
     * –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫—à–µ–π –æ—à–∏–±–∫–µ 
     */    
    public function errorMsg($e){
        return ['text' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ' . $e];        
    }

     
    /**
     * –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω 
     */
    public function deniedMsg(){
        return ['text' => '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º, –≤–Ω–µ—Å–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "' . $this->username . '" –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö'];        
    }
    
    public function checkWin(){
        if(!Windows::isWin()) throw new \Exception('Required Windows OS');
    }  
            
    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ—Å–ª–µ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏.
     * @param array $input                 
     *    'type' => 'photo|document',
     *    'file_name' => 'photo',
     *    'mime_type' => 'image/jpeg',
     *    'file_id' =>
     *    'file_size' =>  
     */      
    public function inputFileMsg(File $file, array $input){
        $this->send(SMILE_DOWNLOAD . ' –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: ' . $input['file_name']);
        $this->__file($file->getAbsolutePath());
    }
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /start 
     * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
     */
    public function __start(){  
        return ['text' => '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.', 'keyboard' => $this->getMainKeyboard()];        
    }
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /help
     * –°–ø—Ä–∞–≤–∫–∞ / –ø–æ–º–æ—â—å
     */
    public function __help(){
        $isWin = Windows::isWin();

        $text = "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: " . AppModule::APP_VERSION . " \n";

        $text .= "\n- –ö–æ–º–∞–Ω–¥—ã -\n";
        $text .= "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–µ—à–∞ /\n";
        $text .= "—Ç.–µ. —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ /cd –∏ cd - –Ω–µ—Ç.\n";
        $text .= "–ê—Ä–≥—É–º–µ–Ω—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ –ø—Ä–æ–±–µ–ª. –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª, –µ–≥–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–º–∏—Ç—å –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ \".\n";
        $text .= "–¢–∞–∫–∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ __\n";
        $text .= "–ü—Ä–∏–º–µ—Ä—ã:\n";
        $text .= "/command \"argument 1\" arg2\n";
        $text .= "/command__0__1__2\n";
        $text .= "/photo 0 == /photo__0\n";

        $text .= "\n- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ -\n";
        $text .= "-- –û–±—â–µ–µ --\n";
        $text .= "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞\n";
        $text .= "/help - –¢–µ–∫—É—â–∞—è —Å–ø—Ä–∞–≤–∫–∞\n";
        $text .= "/ip - –ü–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π ip\n";

        $text .= "\n-- –°–∏—Å—Ç–µ–º–∞ --\n";
        $text .= "/exec [cmd] - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É\n";
        $text .= "/osinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°\n";
            
        $text .= "\n-- –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ --\n";
        $text .= "/cd - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n";
        $text .= "/cd [path] - –£–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n";
        $text .= "/ls - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n";
        $text .= "/file [file] - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ\n";
        if($isWin){
            $text .= "/print [file] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ø–µ—á–∞—Ç—å \n";
        }
        $text .= "/download [file] - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª\n";
        $text .= "/delete [file] - –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª\n";

        $text .= "\n-- –ú–µ–¥–∏–∞ --\n";
        $text .= "/screens - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–∞—Ö\n";
        $text .= "/screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n";
        $text .= "/screenshot [n] - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (/screens)\n";
        $text .= "/cameras - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ web-–∫–∞–º–µ—Ä\n";
        $text .= "/photo - –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å web-–∫–∞–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n";
        $text .= "/photo [n] - –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤—ã–±—Ä–∞–≤–Ω–Ω–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ (/cameras) web-–∫–∞–º–µ—Ä—ã\n";
               
        if($isWin){
            $text .= "\n-- –ö–Ω–æ–ø–∫–∏ --\n";     
            $text .= "/media - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–¥–∏–∞ –∫–Ω–æ–ø–æ–∫\n";
            $text .= "/key__play - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ / –ø–∞—É–∑–∞\n";
            $text .= "/key__stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n";
            $text .= "/key__next - –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫\n";
            $text .= "/key__prev - –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫\n";
            
            $text .= "\n-- –ñ–µ–ª–µ–∑–æ --\n";
            //$text .= "/hardware - –ñ–µ–ª–µ–∑–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n";
            $text .= "/ram - –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å\n";
            $text .= "/battery - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–µ\n";
            $text .= "/temperature - –î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n";
            
            $text .= "\n-- –ü–∏—Ç–∞–Ω–∏–µ --\n";
            $text .= "/reboot - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö\n";
            $text .= "/shutdown - –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö\n";
            
            $text .= "\n-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ --\n";
            $text .= "/uptime - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ü–ö\n";
            $text .= "/volume - –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏\n";
            $text .= "/volume [0-100|up|+|down|-] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏\n";
            $text .= "/brightness - –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏\n";
            $text .= "/brightness [0-100] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏\n";
        }
        
        return ['text' => $text, 'keyboard' => $this->getMainKeyboard()];        
    }    
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /ip
     * –°–º–µ–Ω–∞/–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 
     */
    public function __ip(){
        $data = json_decode(file_get_contents('http://ipinfo.io/json'), true);
        unset($data['readme']);
        
        $this->send(SMILE_NETWORK . " IP info: " . json_encode($data, JSON_PRETTY_PRINT));
    }  
    
    public function __osinfo(){
        $info = "–ù–∞–∑–≤–∞–Ω–∏–µ –û–°: " . System::getProperty('os.name') . "\n";
        $info.= "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ JVM:  " . System::getProperty('os.arch') . "\n";
        $info.= "–í–µ—Ä—Å–∏—è: " . System::getProperty('os.version') . "\n";
        $info.= "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " . System::getProperty('user.name') . "\n";
        $info.= "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫: " . System::getProperty('user.language') . "\n";
        $info.= "–î–æ–º–∞—à–Ω—è—è –ø–∞–ø–∫–∞: " . System::getProperty('user.home') . "\n";
        $info.= "–°—Ç—Ä–∞–Ω–∞: " . System::getProperty('user.country') . "\n";
        
        $this->send($info);
    }     
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /cd
     * –°–º–µ–Ω–∞/–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 
     */
    public function __cd($path = null){                
        return ['text' => '–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ' . $this->fso->changeDir($path)];
    }
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /ls
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 
     * @param string $path –ü—É—Ç—å. / - –∫–æ—Ä–µ–Ω—å, –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏—Å–∫–æ–≤
     * @param string $selectBy name|num –ò—â–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ name) –∏–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É (–µ—Å–ª–∏ num - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ telegram)
     */
    public function __ls($path = null, string $selectBy = 'name'){
        if(strlen($path) > 0){
            $this->fso->changeDir($path, $selectBy);
        }
        
        $list = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ \"" . $this->fso->getCurrentDir() . "\"";
        $btn[] = ['ls / ' . SMILE_ARROW_UP, '/ls ../ ' . SMILE_UP];
        $this->send($list, $this->keyboard($btn)); 
        
        $items = $this->fso->getFileList();
        
        $message = "";
        foreach($items as $item){    
            if(strlen($item['name']) > 30){
                $name = substr($item['name'], 0, 13) . ' ... ' . substr($item['name'], -12);
            } else {
                $name = $item['name'];
            }
            
            switch($item['type']){
                case 'drive':
                    $line = SMILE_DISC . ' ' . $name . " | /ls__" . $item['num'] . "__num \n";
                    break;
                    
                case 'dir':
                    $line = SMILE_FOLDER . ' ' . $name . " | /ls__" . $item['num'] . "__num \n";
                    break;
                    
                case 'file':
                    $line = SMILE_FILE . ' ' . $name . " | /file__" . $item['num'] . "__num \n";
                    break;
            }
            
            if(strlen($message . $line) > TelegramBot::MAX_MESSAGE_LENGTH){
                $this->send($message); 
                $message = '';
            }
            $message .= $line;
        }
        
        if(strlen($message) > 0){
            $this->send($message/*, $this->keyboardInline($btn)*/);
        }
    }    
    
   
    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
     */    
    public function __file($file = null, string $selectBy = 'name'){
        $file = $this->fso->getFile($file, $selectBy);      
             
        $name = $file['name'];
        if(strlen($name) > 20){
            $cmd = $file['num'] . " num";
        }
        else {
            $cmd = $file['name'];
        }
        
        $kb = [];
        
        $kb[0][] = SMILE_PC . ' –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª ' . $cmd;
        $kb[0][] = SMILE_DOWNLOAD . ' –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª ' . $cmd;
        
        if(Windows::isWin()){
            $kb[1][] = SMILE_PRINT . ' –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ñ–∞–π–ª ' . $cmd;
        }
        
        $kb[1][] = SMILE_TRASH . ' –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ' . $cmd;
        
        $info = SMILE_FILE . " –ò–º—è —Ñ–∞–π–ª–∞: $name \n" . 
                "–ü—É—Ç—å: " . dirname($file['path']) . "\n" .
                "–†–∞–∑–º–µ—Ä: " . $file['size'] . "\n";
            
//        $this->send($info, $this->keyboardInline($kb));
        $this->send($info, $this->keyboard($kb));
    }
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /download
     * –û—Ç–¥–∞—ë—Ç —Ñ–∞–π–ª –Ω–∞ —Å–∫—Å—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 
     */    
    public function __download($file = null, string $selectBy = 'name'){  
        $file = $this->fso->getFile($file, $selectBy);          
        $this->sendDoc($file['path']);
    }
    
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª 
     */    
    public function __run($file = null, string $selectBy = 'name'){
        $file = $this->fso->getFile($file, $selectBy); 
        $this->send(SMILE_PC . ' –ó–∞–ø—É—Å–∫–∞—é —Ñ–∞–π–ª "' . $file['name'] . '".');
        open($file['path']);       
    }     
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª 
     */    
    public function __delete($file = null, string $selectBy = 'name'){
        $file = $this->getFilePath($file, $selectBy);
        $this->send(SMILE_TRASH . ' –£–¥–∞–ª—è—é —Ñ–∞–π–ª "' . $file . '".');
        unlink($file);       
    }     
    
    /**
     * –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª 
     */    
    public function __print($file = null, string $selectBy = 'name'){
        $this->checkWin();
        $file = $this->getFilePath($file, $selectBy);
        $res = WindowsScriptHost::PowerShell('
            $word = New-Object -ComObject Word.Application
            $word.visible = $false
            $word.Documents.Open(":file") > $null
            $word.Application.ActiveDocument.printout()
            $word.Application.ActiveDocument.Close()
            $word.quit()
        ', ['file' => $file['path']]);
        $this->send(SMILE_PRINT . ' –§–∞–π–ª "' . $file['name'] . '" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å. ' . "\n" . $res);
    }
    
    public function __screens(){
        $screens = UXScreen::getScreens();
        $info = SMILE_DISPLAY . " –°–ø–∏—Å–æ–∫ —ç–∫—Ä–∞–Ω–æ–≤ (" . sizeof($screens) . "):\n";
        $keyboard = [];
        
        foreach($screens as $i => $screen){
            $n = $i+1;
            $info .= " #$i. " . $screen->bounds['width'] . "x" . $screen->bounds['height'] . ", –ø–æ–∑–∏—Ü–∏—è: " . $screen->bounds['x'] . "x" . $screen->bounds['y'] . ", DPI: " . $screen->dpi . ".\n";
            $keyboard[] = ["/screenshot__$i" => SMILE_DISPLAY . " –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ ‚Ññ$i (" . $screen->bounds['width'] . "x" . $screen->bounds['height'] . ")"];
        }
        
        $this->send($info, $this->keyboardInline($keyboard));
    }  
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /screenshot 
     */
    public function __screenshot(int $screenN = 0){
    
        $screens = UXScreen::getScreens();
        if(!isset($screens[$screenN])) return $this->send("–û—à–∏–±–∫–∞: —ç–∫—Ä–∞–Ω ‚Ññ$screenN –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏c–∫–∞ /screens");
        
        $screen = $screens[$screenN];
                
        $this->send("–î–µ–ª–∞—é —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ ‚Ññ$screenN ...");
        $file = File::createTemp('screenshot', '.png');
        Debug::info('Make screenshot to ' . $file->getAbsolutePath());
        
        app()->appModule()->robot->screenshot($screen->bounds, $screen)->save($file);
        
        $this->sendDoc($file->getAbsolutePath());
    }    
        
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /cameras
     * –ú–æ–≥—É—Ç –≤—ã–≤–∞–ª–∏–≤–∞—Ç—å—Å—è –æ—à–∏–±–∫–∏, –Ω–æ –≤—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ 
     * @param int $camN - –ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã –≤ —Å–ø–∏—Å–∫–µ –∫–∞–º–µ—Ä
     */
    public function __cameras(){
        $cameras = Webcam::getWebcams();
        $keyboard = [];
        if(sizeof($cameras) == 0){
            $list = "üì∑ Web-–∫–∞–º–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã";
        } else {
            $list = "üì∑ –°–ø–∏—Å–æ–∫ web-–∫–∞–º–µ—Ä (" . sizeof($cameras). "):\n";
            foreach($cameras as $i => $camera){
                $list .= " #$i. " . $camera->name;
                $keyboard[] = ["/photo__$i" => "üì∑ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã ‚Ññ$i (" . $camera->name . ")"];
            }
        }
          
        $this->send($list, $this->keyboardInline($keyboard));
    }   
           
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /photo
     * –ú–æ–≥—É—Ç –≤—ã–≤–∞–ª–∏–≤–∞—Ç—å—Å—è –æ—à–∏–±–∫–∏, –Ω–æ –≤—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ 
     * @param int $camN - –ù–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã –≤ —Å–ø–∏—Å–∫–µ –∫–∞–º–µ—Ä
     */
    public function __photo(int $camN = -1){
        $cameras = Webcam::getWebcams();
        if($camN > sizeof($cameras)) return $this->send('–£–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞–º–µ—Ä–∞. –°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /cameras');
        $camera = $cameras[$camN];
        
        $file = File::createTemp('shot', '.png');
        $this->send('–î–µ–ª–∞—é —Å–Ω–∏–º–æ–∫ c –∫–∞–º–µ—Ä—ã ‚Ññ' . $camN . ' (' . $camera->name . ') ...');
        $camera->open();
        $camera->getImage()->save($file);
        $camera->close();
        return ['photo' => $file->getAbsolutePath()];     
    }   
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /temperature 
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
     * –¢–æ–ª—å–∫–æ –¥–ª—è Windows
     */
    public function __temperature(){
        $this->checkWin();
        $this->send('–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤...');
        $t = Windows::getTemperature();
        $res = "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏: ";
        if(sizeof($t) == 0) $res.='–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.';
        foreach($t as $s){
            $name = strlen($s['name']) < 15 ? $s['name'] : (substr($s['name'], 0, 13) . '...');
            $res .= "\n- " . $s['location'] . '/' . $name . ': ' . $s['temp'] . '¬∞C';
        }
        $this->send($res);
    }
    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /ram 
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —Å–≤–æ–±–æ–¥–Ω–æ–π –∏ –∑–∞–Ω—è—Ç–æ–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
     * –¢–æ–ª—å–∫–æ –¥–ª—è Windows
     */
    public function __ram(){
        $this->checkWin();
        $total = Windows::getTotalRAM();
        $free = Windows::getFreeRAM();
        $perc = round($free / $total * 100);
        $msg = "–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: " . round($total / 1024 / 1024, 2) . "MiB\n";
        $msg.= "–°–≤–æ–±–æ–¥–Ω–æ: ". round($free / 1024 / 1024, 2) . "MiB (" . $perc . "%)";
        $this->send($msg);
    }
        
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /volume [0-100] 
     * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
     * –¢–æ–ª—å–∫–æ –¥–ª—è Windows
     */
    public function __volume($level = null, $noecho = null){
        $this->checkWin();
        
        $kb = $this->keyboardInline([
            [
                '/volume__0__1' => 'üîá 0%',
                '/volume__5__1' => 'üîà 5%',
                '/volume__10__1' => 'üîà 10%',
                '/volume__20__1' => 'üîâ 20%',
            ],
            [
                '/volume__30__1' => 'üîâ 30%',
                '/volume__40__1' => 'üîâ 40%',
                '/volume__50__1' => 'üîâ 50%',
                '/volume__60__1' => 'üîâ 60%',
            ],            
            [
                '/volume__70__1' => 'üîâ 70%',
                '/volume__80__1' => 'üîä 80%',
                '/volume__90__1' => 'üîä 90%',
                '/volume__100__1' => 'üîä 100%',
            ], 
            [
                '/volume__down__1' => 'üîà Volume -',
                '/media' => ' üéõ Media RC',
                '/volume__up__1' => 'üîä Volume +',
            ],
        ]);
        
        try{
            $ilevel = intval($level);
            
            if($level == 'up' || $level == '+'){
                Windows::pressKey(Windows::VK_VOLUME_UP);
                $answer = "–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞";
            } 
            elseif($level == 'down' || $level == '-'){
                Windows::pressKey(Windows::VK_VOLUME_DOWN);
                $answer = "–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞";
            } 
            elseif(is_numeric($level) && $ilevel >= 0 && $ilevel <= 100){
                Windows::setVolumeLevel($ilevel);
                $answer = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏: ' . $ilevel . '%';
            } else {
                $answer = '–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏: ' . Windows::getVolumeLevel() . '%';
            }
        } catch (WindowsException $e){
            $this->send('–û—à–∏–±–∫–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        }
        
        if(strlen($answer) > 0 && $noecho != 1){
            $this->send($answer, $kb);
        }
    }
   
            
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /brightness [0-100] 
     * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
     * –¢–æ–ª—å–∫–æ –¥–ª—è Windows
     */
    public function __brightness(?int $level = null){
        $this->checkWin();
        try{
            if(is_int($level) && $level >= 0 && $level <= 100){
                Windows::setBrightnessLevel($level);
                $this->send('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å —è—Ä–Ω–æ—Å—Ç–∏: ' . $level);
            } else {
                $this->send('–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏: ' . Windows::getBrightnessLevel());
            }
        } catch (WindowsException $e){
            $this->send('–û—à–∏–±–∫–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        }
    }    
                
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /shutdown
     * –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö
     * –¢–æ–ª—å–∫–æ –¥–ª—è Windows
     */
    public function __shutdown(){
        $this->checkWin();
        $this->send('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
        
        uiLater(function(){
            $confirm = app()->getForm('ConfirmTimeout');
            $confirm->setButtons('–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö', '–û—Ç–º–µ–Ω–∞');
            $confirm->setText('–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö', '–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ª–∏–±–æ –∫–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
            $confirm->start(10, function(){
                try{
                    $this->send('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
                    Windows::shutdown();
                            
                } catch (WindowsException $e){
                    $this->send('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö');
                } 
            }, function(){
                $this->send('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            });
        });
    }    
                    
    /**
     * –ö–æ–º–∞–Ω–¥–∞ /reboot
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö
     * –¢–æ–ª—å–∫–æ –¥–ª—è Windows
     */
    public function __reboot(){
        $this->checkWin();
        $this->send('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
        
        uiLater(function(){
            $confirm = app()->getForm('ConfirmTimeout');
            $confirm->setButtons('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö', '–û—Ç–º–µ–Ω–∞');
            $confirm->setText('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö', '–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ª–∏–±–æ –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
            $confirm->start(10, function(){
                try{
                    $this->send('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞');
                    Windows::reboot();
                            
                } catch (WindowsException $e){
                    $this->send('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö');
                } 
            }, function(){
                $this->send('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            });
        });
        $this->checkWin();
    }
    
    public function __exec(){
        try{
            $cmd = implode(' ', func_get_args());
            if(Windows::isWin()){
                $result = WindowsScriptHost::cmd($cmd);
            } else {    
                /** @var Process $res */
                $exec = execute($cmd);
                $exec = $exec->start();
                $result = $exec->getInput()->readFully();
            }                    
        } catch (\Exception $e){
            $result = 'Exec error: [' . get_class($e) . '] ' . $e->getMessage();
        }
        
        $this->send($result);
    }
     
    public function __media($noecho = null){
        if($noecho == 1) return;
        $this->checkWin();
        
        $kb = [
            [
                '/key__prev__1' => '‚è™ Prev',
                '/key__stop__1' => '‚èπ Stop',
                '/key__play__1' => '‚èØ Play/Pause',
                '/key__next__1' => '‚è© Next',
            ]
        ];
        
        try {
            $level = Windows::getVolumeLevel();
            $kb[] = [
                '/volume__down__1' => 'üîΩ Volume -',
                '/volume' => "üîâ $level%",
                '/volume__up__1' => 'üîº Volume +',
            ];
        } catch (WindowsException $e){
             $kb[] = [
                '/volume__down__1' => 'üîΩ Volume -',
                '/volume' => "üîâ Volume",
                '/volume__up__1' => 'üîº Volume +',
            ];
        }
        
        $this->send("üéõ Media remote control", $this->keyboardInline($kb));
    }   
        
    public function __key($key = null, $noecho = null){
        switch($key){
            case 'next':
                $this->checkWin();
                Windows::pressKey(Windows::VK_MEDIA_NEXT_TRACK);
                break;
                
            case 'prev':
                $this->checkWin();
                Windows::pressKey(Windows::VK_MEDIA_PREV_TRACK);
                break;  
                              
            case 'stop':
                $this->checkWin();
                Windows::pressKey(178);
                break;             
                                 
            case 'play':
                $this->checkWin();
                Windows::pressKey(Windows::VK_MEDIA_PLAY_PAUSE);
                break;
                
            default:
                app()->appModule()->robot->keyPress($key);
        }
        
        if($noecho != 1){
            $this->send('–ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ "' . $key . '"');
        }
    }

    public function __uptime(){
        $this->checkWin();
        $bootTime = Windows::getUptime(); 
        $programTime = (time() - app()->appModule()->startup) * 1000;
        
        $btime = new Time($bootTime, TimeZone::UTC()); 
        $ptime = new Time($programTime, TimeZone::UTC()); 
        
        $this->send(
            '–ö–æ–º–ø—å—é—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ' . ($btime->day() - 1) . ' –¥–Ω–µ–π ' . $btime->hourOfDay() . ' —á–∞—Å–æ–≤ ' . $btime->minute() . ' –º–∏–Ω—É—Ç ' . $btime->second() . " —Å–µ–∫—É–Ω–¥.\n" .
            '–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: ' . ($ptime->day() - 1) . ' –¥–Ω–µ–π ' . $ptime->hourOfDay() . ' —á–∞—Å–æ–≤ ' . $ptime->minute() . ' –º–∏–Ω—É—Ç ' . $ptime->second() . " —Å–µ–∫—É–Ω–¥." 
        );
    }         
      
    public function __battery(){
        $this->checkWin();
        try {
            $perc = Windows::getBatteryPercent();
            $voltage = Windows::getBatteryVoltage();
            $isCharge = Windows::isBatteryCharging();
            $rtime = Windows::getBatteryTimeRemaining();
            $time = new Time($rtime, TimeZone::UTC()); 
            
            $this->send(
                "üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞: \n" . 
                "–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: " . $perc . "%\n" .
                "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: " . $voltage . "mV\n" .
                "–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è: " . ($isCharge ? '–î–∞': '–ù–µ—Ç') . "\n" .
                "–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " . ($time->day() - 1) . ' –¥–Ω–µ–π ' . $time->hourOfDay() . ' —á–∞—Å–æ–≤ ' . $time->minute() . ' –º–∏–Ω—É—Ç ' . $time->second() . ' —Å–µ–∫—É–Ω–¥'
            );
            
        } catch (WindowsException $e){
            $this->send('üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    } 
}